# Generated by CodiumAI
import pytest
from fastapi import HTTPException
from pytest import Session
from sql_app.api import deps
from sql_app.crud.tarjetas_y_usuarios.crud_personal_interno import CRUDPersonalInterno
from sql_app.models.tarjetas_y_usuarios import PersonalInterno
from sql_app.schemas.tarjetas_y_usuarios.personal_interno import PersonalInternoCreate
# from sql_app.crud import crud_tarjeta
from sql_app.schemas.tarjetas_y_usuarios.tarjeta import TarjetaCreate
from sql_app.crud.tarjetas_y_usuarios.crud_tarjeta import CRUDTarjeta
from sql_app.models.tarjetas_y_usuarios import Tarjeta

@pytest.fixture(scope="class")
def db_session():
    """Fixture for creating a database session."""
    db_generator = deps.get_db()
    db_session = next(db_generator)  # Get the session object from the generator

    try:
        yield db_session
    finally:
        # Properly close the session and clean up
        next(db_generator, None)

# Session-scoped fixture for setup and teardown
@pytest.fixture(scope="session", autouse=True)
def setup_and_teardown_db():
    # Setup code here (if needed)
    
    yield  # Let tests run
    
    # Teardown: cleanup after all tests
    db_generator = deps.get_db()
    db_session = next(db_generator)
    try:
        # Delete the PersonalInterno record after all tests
        db_session.query(PersonalInterno).filter(PersonalInterno.id == 123).delete()
        db_session.query(Tarjeta).filter(Tarjeta.id == 1).delete()
        db_session.commit()
    finally:
        next(db_generator, None)

@pytest.fixture(scope="class")
def personal_interno_data():
    """Fixture to provide personal interno data for test methods."""
    return {
        "id": 123,
        "nombre": "John",
        "apellido": "Doe",
        "telefono": "1234567890",
        "contra_sin_hash": "contra"
    }

@pytest.fixture(scope="class")
def tarjeta_data():
    """Fixture to provide personal interno data for test methods."""
    return {
        "raw_rfid": "1", 
        "rol_nombre": "ADMIN"
    }

@pytest.fixture(scope="class")
def non_existing_id(db_session: Session):
    crud_personal_interno = CRUDPersonalInterno(PersonalInterno)
    id_bajo_prueba = 1223
    while True:
        registro = crud_personal_interno.get(db=db_session, id=id_bajo_prueba)
        if registro is None:
            break
        id_bajo_prueba += 1

    return id_bajo_prueba

class TestCRUDPersonalInterno:
    # can create a new personal interno with valid data
    def test_create_new_personal_interno_with_valid_data(self, db_session: Session, personal_interno_data: dict):
        crud_personal_interno = CRUDPersonalInterno(PersonalInterno)
        personal_interno_in = PersonalInternoCreate(**personal_interno_data)
    
        personal_interno, pudo_crearse, msg = crud_personal_interno.create_or_reactivate(db=db_session, obj_in=personal_interno_in)
        assert pudo_crearse == True
    
        assert personal_interno is not None
        assert personal_interno.id == personal_interno_data["id"]
        assert personal_interno.activa == True
        assert personal_interno.nombre == personal_interno_data["nombre"]
        assert personal_interno.apellido == personal_interno_data["apellido"]
        assert personal_interno.telefono == personal_interno_data["telefono"]

    # cannot create a new personal interno with an existing id
    def test_cannot_create_new_personal_interno_with_existing_id(self, db_session: Session, personal_interno_data: dict):
        crud_personal_interno = CRUDPersonalInterno(PersonalInterno)
        personal_interno_in = PersonalInternoCreate(**personal_interno_data)
        
        personal_interno, pudo_crearse, msg = crud_personal_interno.create_or_reactivate(db=db_session, obj_in=personal_interno_in)
        
        assert pudo_crearse == False
    
    # can deactivate an existing personal interno
    def test_deactivate_existing_personal_interno(self, db_session: Session, personal_interno_data: dict):
        # Create a new personal interno
        crud_personal_interno = CRUDPersonalInterno(PersonalInterno)
        # Deactivate the personal interno
        deactivated_personal_interno, success, message = crud_personal_interno.deactivate(
            db=db_session, id=personal_interno_data['id']
        )

        # Check if the personal interno was deactivated successfully
        assert success is True
        assert message == ""
        assert deactivated_personal_interno.activa is False

    
    # Deactivate an already deactivated personal interno
    def test_deactivate_already_deactivated_personal_interno(self, db_session: Session, personal_interno_data: dict):
        crud_personal_interno = CRUDPersonalInterno(PersonalInterno)
        deactivated_personal_interno, success, message = crud_personal_interno.deactivate(
            db=db_session, id=personal_interno_data['id']
        )
        assert success is False

    # Deactivate a non-existing personal interno
    def test_deactivate_non_existing_personal_interno(self, db_session: Session, non_existing_id: int):
        crud_personal_interno = CRUDPersonalInterno(PersonalInterno)
        personal_interno, success, message = crud_personal_interno.deactivate(
            db=db_session, id=non_existing_id
        )
    
        assert personal_interno is None
        assert success is False

    # can entregar_tarjeta_a_personal with valid data
    def test_entregar_tarjeta_a_personal_with_valid_data(
        self, db_session: Session, personal_interno_data: dict, tarjeta_data: dict
    ):
        # Create a new tarjeta
        crud_tarjeta = CRUDTarjeta(Tarjeta)
        tarjeta_in = TarjetaCreate(**tarjeta_data)
        tarjeta, pudo_crearse, msg = crud_tarjeta.create_or_reactivate(db=db_session, obj_in=tarjeta_in)
        assert pudo_crearse == True

        # Entregar the tarjeta to the personal interno
        crud_personal_interno = CRUDPersonalInterno(PersonalInterno)
        personal_interno_entregado, pudo_entregarse, msg = crud_personal_interno.entregar_tarjeta_a_personal(
            db=db_session, personal_id=personal_interno_data['id'], tarjeta_id=tarjeta.id
        )
        assert pudo_entregarse == True
        assert personal_interno_entregado.tarjeta_id == tarjeta.id

    def test_devolver_tarjeta_de_personal(
        self, db_session: Session, tarjeta_data: dict, personal_interno_data: dict
    ):
        # Retrieve the tarjeta under test
        crud_tarjeta = CRUDTarjeta(Tarjeta)
        tarjeta_in_db = crud_tarjeta.get_active(
            db=db_session, id=tarjeta_data['raw_rfid'])
        assert tarjeta_in_db is not None
        
        # Entregar the tarjeta to the personal interno
        crud_personal_interno = CRUDPersonalInterno(PersonalInterno)
        tarjeta, pudo_devolverse, msg = crud_personal_interno.personal_devuelve_tarjeta_a_banca(
            db=db_session, tarjeta_id=tarjeta_data['raw_rfid']
        )
        assert pudo_devolverse == True
        assert tarjeta.id == int(tarjeta_data['raw_rfid'])
        
        personal_in_db = crud_personal_interno.get(db=db_session, id=personal_interno_data['id'])
        assert personal_in_db.tarjeta_id is None
